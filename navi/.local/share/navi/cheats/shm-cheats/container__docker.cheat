% docker, container

# Remove an image
docker image rm <image_id>

# Delete an image from the local image store
docker rmi <image_id>

# Clean none/dangling images
docker rmi $(docker images --filter "dangling=true" -q --no-trunc)

# Force clean none/dangling images
docker rmi $(docker images --filter "dangling=true" -q --no-trunc) -f

# delete ALL dangling data (i.e. In order: containers stopped, volumes without containers and images with no containers). 
docker system prune

# List all images that are locally stored with the Docker engine
docker images

# list docker images
docker images ls

# Build an image from the Dockerfile in the current directory and tag the image
docker build -t <image>:<version> .

# Pull an image from a registry
docker pull <image>:<version>

# Stop a running container through SIGTERM
docker stop <container_id>

# Stop a running container through SIGKILL
docker kill <container_id>

# Stop and remove a running container through SIGTERM
docker stop <container_id> && docker rm <container_id>

# Stop and remove a running container through SIGKILL
docker kill <container_id> && docker rm <container_id>

# List the networks
docker network ls

# List the running containers
docker ps
#
# List all containers
docker ps --all

# Delete all running and stopped containers
docker rm -f $(docker ps -aq)

# Create a new bash process inside the container and connect it to the terminal
docker exec -it <container_id> bash

# Print the last lines of a container's logs
docker logs --tail 100 <container_id> | less

# Print the last lines of a container's logs and following its logs
docker logs --tail 100 <container_id> -f

# Create new network
docker network create <network_name>

# Shows docker image layers
docker history --no-trunc ubuntu:oracular-20240527 | tac | tr -s ' ' | cut -d " " -f 5- | sed 's,^/bin/sh -c #(nop) ,,g' | sed 's,^/bin/sh -c,RUN,g' | sed 's, && ,\n  & ,g' | sed 's,\s*[0-9]*[\.]*[0-9]*[kMG]*B\s*$,,g' | head -n -1

# Check the user who launched the docker container
docker inspect $(docker ps -q) --format '{{.Config.User}} {{.Name}}'

$ image_id: docker images --- --headers 1 --column 3
$ container_id: docker ps --- --headers 1 --column 1


% docker-compose, container

# Builds, (re)creates, starts, and attaches to containers for all services
docker-compose up

# Builds, (re)creates, starts, and dettaches to containers for all services
docker-compose up -d

# Builds, (re)creates, starts, and attaches to containers for a service
docker-compose up -d <service_name>

# Builds, (re)creates, starts, and dettaches to containers for a service
docker-compose up -d <service_name>

# Print the last lines of a serviceâ€™s logs
docker-compose logs --tail 100 <service_name> | less

# Print the last lines of a service's logs and following its logs
docker-compose logs -f --tail 100 <service_name>

# Stops containers and removes containers, networks created by up
docker-compose down
