*shm-cheatsheet.txt*    For Vim version 8.0 -- Last Change: 2019-01-30
*shmvim*
   _____ __  ____  ___   _    ___              ________               __       __              __ 
  / ___// / / /  |/  /  | |  / (_)___ ___     / ____/ /_  ___  ____ _/ /______/ /_  ___  ___  / /_
  \__ \/ /_/ / /|_/ /   | | / / / __ `__ \   / /   / __ \/ _ \/ __ `/ __/ ___/ __ \/ _ \/ _ \/ __/
 ___/ / __  / /  / /    | |/ / / / / / / /  / /___/ / / /  __/ /_/ / /_(__  ) / / /  __/  __/ /_  
/____/_/ /_/_/  /_/     |___/_/_/ /_/ /_/   \____/_/ /_/\___/\__,_/\__/____/_/ /_/\___/\___/\__/  

====================================================================
CONTENTS                                            *shmContents*
    1. Mappings ............. |shmMappings| 
    2. Spelling ............. |shmSpelling|

My tips, reminders, notes, and reference for Vim.

- Y will copy from cursor to end of line. Not vi. Custom mapping.
- map X so that it deletes things to the black hole register (map X "_d, for example). That could be useful.

- When a command is noted as CTRL-\[LETTER\], the letter is typed as lowercase unless expressly noted.
- If a capital letter is *anywhere* else in a command besides with CTRL, then type it as a capital.

- [Vim Sessions](https://jvns.ca/blog/2017/09/10/vim-sessions/)
- [Vim Movements via Thoughtbot](https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally)
- Vim Diff
  - to diff two tabs in the current window --> :windo diffthis
  - to end diff mode --> :diffoff!
- Re-Syntax Highlight current buffer --> autocmd BufEnter * :syntax sync fromstart
Vim has a built-in re-formatter for whitespace. Visually select some text and use the = key to re-indent all of it.
- :%s/foo/bar/gc --> Change each 'foo' to 'bar', but ask for confirmation first
- check GUI Font --> :set guifont?

Tab Movement:
gt is the keyboard shortcut for :tabnext and gT for :tabprevious

Autocomplete
                    when i am typing in a command and using tab completion
                    (especially e: ~/folder/folder/folder) how do I confirm my
                    selection? Enter takes me to netrw, space I have to bakspace, slash
                    adds an extra slash, etc. I know Ctrl+N and Ctrl+P move the
                    selections, but what is confirm?
22:56         feoh: Try Ctrl-y
              feoh: That's the traditional Neovim "Accept this completion" keybind.


Show Invisible Characters (whitespace)
Vimâ€™s list feature can be used to reveal hidden characters, such as tabstops and newlines.
- toggle list feature by typing "set: list!"
- help: listchars

Clipboard
- The <C-r>{reg} command lets us paste a register from Insert mode (and it works in commandline mode too!)
" the default register
% the current file name
# the alternate file name
* the clipboard contents (X11: primary selection)
+ the clipboard contents
/ the last search pattern
: the last command-line
. the last inserted text
- the last small (less than a line) delete

Mark Motions
- go to last change: `.
    - The ` goes to a mark, and . is a "special" mark which is automatically set to the position where the last change was made.
- go back to where the cursor was before you made your last jump: ``
- this is the position where the cursor was the last time when insert mode was stopped: `^
- :help mark-motions

- move between positions in the change list: g; and g,

You can also use ' (apostrophe) instead of ` (backtick)

- increment the next number: Ctrl-A (normal mode)
- decrement the next number: Ctrl-X (normal mode)
- The number can be at the cursor, or to the right of the cursor (on the same line).

[vimgrep](http://vimcasts.org/episodes/search-multiple-files-with-vimgrep/)

:vimgrep /{pattern}/ {% or *}
% is the path of the active buffer
* is the present working directory (pwd)

:vimgrap/<C-r>// %
seach for the last pattern in your search history

To Sort:
- make session vim shortcut command
- work on taskpaper vim folding
- figure out how to use the vim taskpaper plugin
- learn tags and how to use them to navigate to get rid of folds in code
- learn how to auto create and auto update sessions
- create commands to make and source sessions @vim
- figure out searching in vim in windows
- create a plugin that handles commenting for adding comments in markdown -- maybe automatically
=================================================================
SPELLING                                            *shmSpelling*
- TODO: create a mapping to an FN key to toggle spelling
- To add a word to your personal dictionary, navigate to the word you want to add and type: zg (undo with zug).
- To do the opposite and mark a word as incorrect, navigate to the word and type: zw (undo with zuw).
- To jump between misspelled words, type: ]s and [s
- To see a list of suggested spelling corrections, navigate to the word you want help with and type: z=

=================================================================
SESSIONS                                            *shmSessions*
- [Vim Sessions](https://jvns.ca/blog/2017/09/10/vim-sessions/)
- [Vim Movements via Thoughtbot](https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally)
- Vim Diff
- to diff two tabs in the current window --> :windo diffthis
- to end diff mode --> :diffoff!
- Re-Syntax Highlight current buffer --> autocmd BufEnter * :syntax sync fromstart
Vim has a built-in re-formatter for whitespace. Visually select some text and use the = key to re-indent all of it.
- :%s/foo/bar/gc --> Change each 'foo' to 'bar', but ask for confirmation first
- check GUI Font --> :setgui
- The `. command will bring you to your last change.
The ` goes to a mark, and . is a "special" mark which is automatically set to the position where the last change was made. See :help `. for some more information.
There is also `` which will bring you back to where the cursor was before you made your last jump. See :help `` for more information.
Another useful mark is `^; this is the position where the cursor was the last time when insert mode was stopped. See :help `^.
See :help mark-motions for some more general info about using marks (including some other "special" marks that are automatically set).
You can also use g; and g, to move between position in the change list. See :h g; and :h g
You can also use ' (apostrophe) instead of ` (backtick)
https://vi.stackexchange.com/questions/2001/how-do-i-jump-to-the-location-of-my-last-edit/2042
http://vim.wikia.com/wiki/Moving_around
https://stackoverflow.com/questions/8708154/open-current-file-in-web-browser-in-vim
- In normal mode, typing Ctrl-A will increment the next number, and typing Ctrl-X will decrement the next number. The number can be at the cursor, or to the right of the cursor (on the same line). These are the defaults for Vim, although some scripts remap these keys to perform other functions.


## Movement and File Navigation

| Command | Result | Example and Notes |
|:-------:|:-------|:--------|
| CTRL-G | message with file name and current position in file |-|
| number G | moves to that line number |-|
| CTRL-O | go back to previous cursor position | useful for searching |
| CTRL-I | go forward on cursor position "tree" | useful for searching |

### Buffers

| Command | Result | Example and Notes |
|:-------:|:-------|:--------|
| from command line "vim \*.ext" or any listing of files and folder searches | loads all files in a directory into a buffer | learn regex |
| :ls | shows buffer list |-|
| :bn | open the next buffer in the current window |-|
| :bp | open the previous buffer in the current window |-|
| CTRL-^ CTRL-6 | switch to the alternate buffer |-|

- % notes the active buffer and \# notes the alternate buffer

### Related :help Searches
- ruler
- user-manual
- insert-index
- text-objects

---

## Windows and Tabs

| Command | Result | Example and Notes |
|:-------:|:-------|:--------|
| :only | closes every window but current window |-|
| CTRL-W W | cycle through open window |-|
| CTRL-W + | increase size of current window |-|
| CTRL-W - | decrease size of current window |-|
| CTRL-W = | equalize size of windows |-|
| CTRL-W _ | maximize current window vertically |-|
| CTRL-W | | maximize current window horizontally |-|
| ctrl-w r | rotate all windows |-|
| ctrl-w R | rotate all windows |-|
| ctrl-w x | exchange current window with its neighbour |-|
| ctrl-w H | move current window to far left |-|
| ctrl-w J | move current window to bottom |-|
| ctrl-w K | move current window to top |-|
| ctrl-w L | move current window to far right |-|

### Related :help Searches
- ctrl-w

---

## Folding

| Command | Result | Example and Notes |
|:-------:|:-------|:--------|
| \[z | move to top of current fold |-|
| \]z | move to bottom of current fold |-|
| zM | close all folds |-|
| zR | open all folds |-|
| za | toggle state of current fold |-|
| zj | jump to next fold |-|
| zk | jump to previous fold |-|

## Editing Text

| Command | Result | Example and Notes |
|:-------:|:-------|:--------|
| r | replaces a single character in a word | Sarrh |
| R number | replaces more than one character |-|
| ce | change til end of word from cursor |-|
| d$ or D | delete to end of line |-|
| J | join line with line below it | puts space at join position |
| gJ | join line with line below it | puts no space at join position |

### Indentation Commands
| Command | Result | Example and Notes |
|:-------:|:-------|:--------|
| number >> or visual > | indent entire lines | . indents the same selection of lines again |
| number < or visual << | outdent entire lines |. outdents the same selection of lines again |
| == or number = | auto indent lines based on indent rules for the language |-|
| G=gg | auto indents the entire file |-|

## Searching and Replacing

| Command | Result | Example and Notes |
|:-------:|:-------|:--------|
| % | find and go to a matching \),\], or \} |-|
| :s/old/new | substitue new for first old in a line type |-|
| :s/old/new/g | substitue new for all olds in a line type |-|
| :#,#s/old/new/g | where #,# are the line numbers of the range of lines where the substitution is to be done |-|
| :%s/old/new/g | to change every occurrence in the whole file |-|
| :%s/old/new/gc | to find every occurrence in whole file; prompt whether to substitute or not |-|

## Other

| Command | Result | Example and Notes |
|:-------:|:-------|:--------|
| r FILENAME | insert the contents of a file |-|
| :! | execute any external shell command | :! ls |
| v motion :w FILENAME | writes visual selection to a new file |-|
| CTRL-X | decrease number |-|
| CTRL-A | increase number |-|

| <leader>sl! | show or hide invisible characters |-|
: recent versions of MacVim change the working directory globally with `cd`, and locally for the current window with `lcd`
You can reveal the current directory with the command:

:pwd

To change the working directory for the current tab, use the command:

:cd

Note that both :pwd and :cd commands are native to Vim. You can call the equivalent commands for your shell by running :!pwd or :!cd.

Add a ? mark after the setting name and it will show the valu

## Plugins

### [pathogen.vim](https://github.com/tpope/vim-pathogen)
- Normally to generate documentation, Vim expects you to run :helptags on each directory with documentation (e.g., :helptags ~/.vim/doc). Provided with pathogen.vim is a :Helptags command that does this on every directory in your 'runtimepath'. If you really want to get crazy, you could even invoke Helptags in your vimrc. I don't like to get crazy.

### [surround.vim](https://github.com/tpope/vim-surround)

### [undotree](https://github.com/mbbill/undotree)
There are some hotkeys provided by vim to switch between the changes in history, like u, <ctrl-r>, g+, g- as well as the :earlier and :later commands.

[Undotree Options](https://github.com/mbbill/undotree/blob/master/plugin/undotree.vim#L15)

### [fugitive.vim](https://github.com/tpope/vim-fugitive)

### [repeat.vim](https://github.com/tpope/vim-repeat)


## vimrc Possibilities
augroup highlight_follows_focus
    autocmd!
    autocmd WinEnter * set cursorline
    autocmd WinLeave * set nocursorline
augroup END

augroup highligh_follows_vim
    autocmd!
    autocmd FocusGained * set cursorline
    autocmd FocusLost * set nocursorline

augroup END

augroup active_relative_number
  au!
  au BufEnter * :setlocal number relativenumber
  au WinEnter * :setlocal number relativenumber
  au BufLeave * :setlocal nonumber norelativenumber
  au WinLeave * :setlocal nonumber norelativenumber
augroup END


ack.vim - why is this awesome?

It's not. It's completely useless. See :help :grep and :help 'grepprg'.

" Whitespace
set wrap
set textwidth=79
set formatoptions=tcqrn1
set softtabstop=2

## [Let Vim do the Typing](https://www.youtube.com/watch?v=3TX3kV3TICU)
CTRL-R 
then you have the register you want to paste from

LEARN MORE ABOUT REGISTERS
" next key is the register in normal mode

CTRL-A allows you to repeat the insertion with a different command such as go to bracket instead of go to comma or end of line


### Completion
CTRL-P is default for completion -- it looks backwards through the document

vim can see other files we have open and other parts of the project

context about where you are in the documentation in the bottom in the status bar

various vim plugins that will run ctags for you

### CTRL-X and...

CTRL+] = ctags
CTRL+F = file names
CTRL+K = dictionary
CTRL+L = rest of line
arbi

### Search vim command history
q:
?
(type)
<CR> 

you can nnoremap q: q:? to pre-populate the ? search field.. if you set incsearch then it even starts searching automatically.

another possible map is cnoremap <expr> <c-f> '<c-u><c-f>?'.getcmdline().'<cr>'.. start typing a component into the command line then press ctrl-f (replace the first ctrl-f with whatever map you want, although i wouldn't recomment ctrl-r). this is somewhat close to bash's functionality

you can always use the command window q:, q?, q/

## Search Histroy
#vim tip: Typing Ctrl-F during `/` search will open search history. It is opened as a
buffer so, yes, you can search in search history!

[Switching between files using vanilla vim](https://stackoverflow.com/questions/16082991/vim-switching-between-files-rapidly-using-vanilla-vim-no-plugins/16084326#16084326)

yep. if you just wanted to check if your scripts are run, you can use :scriptnames
runtimepath is like your shell's PATH: it's where files are searched for, not which paths the actual files are in. you don't see /bin/ls your $PATH, just /bin

neovim - print runtime path
:lua print(vim.inspect(vim.api.nvim_list_runtime_paths()))

vim print list of directories in runtimepath:
:echo &runtimepath

vim check for specific directory in runtimepath
return 1 if exists 0 if it does not
:echo index(split(&runtimepath, ','), '~/.config/vim-base') != -1

Vim References
[Learn Vimscript the Hard Way](http://learnvimscriptthehardway.stevelosh.com/)
[vimcasts](http://vimcasts.org/)
[vi-improved.org](https://www.vi-improved.org/)
[VimAwesome](https://vimawesome.com/)
[Vimways](https://vimways.org/)
[/r/vim](https://old.reddit.com/r/vim/)
[romainl's GitHub](https://github.com/romainl/)
[Learn vim For the Last Time](https://danielmiessler.com/study/vim/)

ToDo
- Read and implement https://github.com/romainl/idiomatic-vimrc/blob/master/idiomatic-vimrc.vim

Ultisnips and Vim Lists
[12:47:35] novum:	nu. `!v [''][execute('normal! "+p')]` or `!v @+`
[12:47:39] schneid3306:	I also tried a python function that defines a string makes the string = vim.command('normal "+p') and then returns it
[12:48:14] schneid3306:	awesome novum will give it a go. thanks.
[12:50:09] novum:	I would think that vim.command('normal! "+p') would work.
[12:50:17] novum:	in python interpolation
[12:51:27] schneid3306:	novum, Oddly, it didn't. But the !v @+ worked like a charm.
[12:53:35] schneid3306:	novum, what does '[''] do in your 1st example? i know what the rest of it does. want to know for future reference.
[12:53:47] schneid3306:	'['']'**
[12:54:04] novum:	execute() returns 0. you don't want to insert 0 into the document I presume, so I find [''][execute('..')] works ok
[12:54:43] novum:	can use same technique in nnoremap <expr> <leader>taco [''][execute('..')] for example
[12:55:19] novum:	it's after the execute is evaluated, you basically have  [''][0]  if that helps clarify
[12:55:38] schneid3306:	yes! okay. so basically put register 0?
[12:55:54] novum:	no, just access the list [''] at index 0
[12:55:58] m_ben:	I have never seen this syntax with the []. where can I read about it?
[12:56:08] novum:	it's just a list
[12:56:17] novum:	:echo ['hello', 'world'][0]
[12:56:26] novum:	:echo ['hello', 'world'][1]

More Ultisnips Information: https://castel.dev/post/lecture-notes-1/

Vim Registers
registers can be listed with :reg
https://www.brianstorti.com/vim-registers/

## From reference/vim-synopsis.txt
:scriptnames - List the file loaded during initial startup
J - deletes a line break (join)
u - undo; U - undo line
x - deletes a character
a - append
o - open a line below; O - open a line above
ZZ - write and exit
$ - move 2 the end of line
^ - move to beginning
fX - find x
Fx - Find x backwards
% - find matching pairs
nG - puts in line number 'n'; G- end of file
gg - start of the file
Ctrl-G - ruler display
/ - search fwd
? - search backward
set hlsearch - highlight search
set incsearch - incremental search
set nowrapscan - stops scanning @ the EOF
:edit ~./XXX.xxx - edits a file
'' - to jump back 2 d old position
dw - delete word
dd - delete line
d$ - delete till EOL
cw - change word
cc - changes whole line
D - d$
X- deletes char left to the cursor
s- change one char
S- change a whole line
r - replace a char
. - executes the last CHANGE command
p - paste below the cursor
P - pastes above the cursor
y - copy
yw- copy word
yy - copy line
R - replace till Esc
~ - change case
set background=dark
syntax enable
Ctrl-L - refreshes screen

Completion
1. Local keyword completion (|i_Ctrl-X_Ctrl-N|)
2. File path completion     (|i_Ctrl-X_Ctrl-F|)
3. Omni completion (|i_Ctrl-X_Ctrl-O|)

Vim remove all empy lines
:g/^$/d

remove all lines that inlcude only whitespace characters
:g/^\s*$/d

====================

LSP Docs:
:h lsp-quickstart

print LSP client details:
:lua for _, c in ipairs(vim.lsp.get_clients({bufnr = 0})) do vim.print(c) end

from documents: lua =vim.lsp.get_clients()[1].server_capabilities

might be worth making a custom function:
vim.api.nvim_create_user_command("LspInfoPrint", function()
  local clients = vim.lsp.get_clients({ bufnr = 0 })
  if #clients == 0 then
    print("No LSP clients attached to this buffer.")
    return
  end

  for _, client in ipairs(clients) do
    vim.print(client)
  end
end, {})

More information on LSP/LSP Configs: https://www.andersevenrud.net/neovim.github.io/lsp/

LSP Default Keymaps (:h lsp-defaults):

BUFFER-LOCAL DEFAULTS
'omnifunc' is set to vim.lsp.omnifunc(), use i_CTRL-X_CTRL-O to trigger completion.
'tagfunc' is set to vim.lsp.tagfunc(). This enables features like go-to-definition, :tjump, and keymaps like CTRL-], CTRL-W_], CTRL-W_} to utilize the language server.
'formatexpr' is set to vim.lsp.formatexpr(), so you can format lines via gq if the language server supports it.
To opt out of this use gw instead of gq, or clear 'formatexpr' on LspAttach.
K is mapped to vim.lsp.buf.hover() unless 'keywordprg' is customized or a custom keymap for K exists.

GLOBAL DEFAULTS
grr gra grn gri i_CTRL-S These GLOBAL keymaps are created unconditionally when Nvim starts:
"grn" is mapped in Normal mode to vim.lsp.buf.rename()
"gra" is mapped in Normal and Visual mode to vim.lsp.buf.code_action()
"grr" is mapped in Normal mode to vim.lsp.buf.references()
"gri" is mapped in Normal mode to vim.lsp.buf.implementation()
"gO" is mapped in Normal mode to vim.lsp.buf.document_symbol()
CTRL-S is mapped in Insert mode to vim.lsp.buf.signature_help()
You can remove GLOBAL keymaps at any time using vim.keymap.del() or :unmap. See also gr-default. 

====================


To generate HELP after installing a plugin:
:helptags ALL

This scans all 'runtimepath' entries for any doc/ directories and updates their help tags. It's the easiest way to make sure all plugins have their help properly indexed.


 vim:ft=help:
