#extends filetype1, filetype2

global !p
from shm_snippet_helpers import *
endglobal

snippet bcom
/* ${0:${VISUAL}} */
endsnippet

snippet AND
&& $0
endsnippet

snippet OR
|| $0
endsnippet

snippet NOT
!$0
endsnippet

snippet switch
switch (${1:variableName})
\{
	case ${2:case1}:
		${3:case1Actions}
		break;
	case ${4:case2}:
		${5:case2Actions}
		break;
	default:
		break;
}
endsnippet

snippet case "case"
case ${1:caseValue}:
	$0
	break;
endsnippet

snippet while
while (${1:evaluationStatement})
\{
	$0
}
endsnippet

snippet for "for loop"
for (int ${1:i} = ${2:0}; $1 ${3:<} ${4:10}; $1${5:++})
\{
	$0
}
endsnippet

snippet forr "for loop (reverse)"
for (int ${1:i} = ${2:10}; $1 ${3:>=} ${4:0}; $1${5:--})
\{
	$0
}
endsnippet

snippet foreach
foreach ( ${1:dataType} ${2:item} in ${3:collection})
\{
endsnippet

snippet trycatch
try
\{
	$0
}
catch (${1:Exception} ${2:ex})
\{
	${3:exceptionExpression}
}
endsnippet

snippet tryfin "try finally block"
try
\{
	$0
}
finally
\{
}
endsnippet

snippet func
${1:public private} ${2:dataType or void} ${3:methodName}()
\{
	$0
	// return
	// void does not return a value; dataType does
}
endsnippet

snippet if
if (${1:condition})
\{
	${2:statement}
}
endsnippet

snippet ife
if (${1:condition})
\{
	${2:statement}
}
else
\{
	${3:elseStatement}
}
endsnippet

snippet else
else
\{
	${1:else statement}
}
endsnippet

snippet elif
else if (${1:condition})
\{
	${2:statement}
}
endsnippet

snippet str
string ${1:name} = "${2:string}";
endsnippet

snippet int
int ${1:name} = ${2:int};
endsnippet

snippet bool
bool ${1:name} = ${2:true false};
endsnippet

snippet guid
Guid ${1:name} = Guid.empty;
Guid $1 = new Guid(${2:variable or String});
Guid $1 = ${2:variable or String}.Id
endsnippet

snippet altkey
KeyAttributeCollection ${1:name} = new KeyAttributeCollection();
$1.Add("${2:fieldName}", ${3:value});
$1.Add("${4:fieldName}", ${5:value});
endsnippet

snippet upsert

KeyAttributeCollection ${1:keyName} = new KeyAttributeCollection();
$1.Add("${2:fieldName}", ${3:value});
$1.Add("${4:fieldName}", ${5:value});

Entity ${6:name} = new Entity("${7:crmEntity}", $1);
$6["${8:crmFieldNameToUpdate}"] = ${9:valueToPutInCRMField};

UpsertRequest $6Request = new UpsertRequest()
\{
Target = $6
};

try
\{
	UpsertResponse $6Response = (UpsertResponse)service.Execute($6Request);
	// if (response.RecordCreated) \{ }
}
catch (Exception ex)
\{
	${10:catchExpression}
}
endsnippet

snippet optval
new OptionSetValue($)
endsnippet

snippet entityref
EntityReference ${1:name} = new EntityReference("${2:crmEntityName}", ${3:guid});
endsnippet

snippet entity
Entity ${1:name} = new Entity("${2:crmEntityName}", ${3:guid});
endsnippet

snippet ifrow
if (!Row.${1:rowName}_IsNull)
\{
	${2:upsertEntity}["${3:crmFieldName}"] = Row.$1;
}
endsnippet

snippet trace
Trace.WriteLine(${0:${VISUAL}});
endsnippet

snippet plugex
throw new InvalidPluginExecutionException(${0:${VISUAL}});
endsnippet

snippet class
public class ${1:className}
\{
	#region $1 properties
	private ${2:dataType} _${3:propertyName}

	public $1(string $3)
	\{
		_$3 = $3;
	}

	public $2 `!p snip.rv = t[3].title()`
	\{
		get \{ return _$3; }
		set \{ _$3 = value; }
	}
	$0
	#endregion
}
endsnippet

snippet propfull
private ${1:dataType} _${2:propertyName}
_$2 = $2;
public $1 `!p snip.rv = t[2].title()`
\{
	get \{ return _$2; }
	set \{ _$2 = value; }
}
endsnippet

snippet newservice
CrmServiceClient cservice;
OrganizationServiceProxy service;

ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
cservice = new CrmServiceClient(${1:username}, CrmServiceClient.MakeSecureString(${2:password}), "", ${3:uniqueName}, itOffice365: true);
service = cservice.OrganizationServiceProxy;
endsnippet

snippet namespaces
#region Namespaces
using System;
using System.Diagnostics;
using Microsoft.Xrm.Sdk.Client;
using System.Net;
using Microsoft.Xrm.Tooling.Connector;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using PlusConsultingSDK;
endsnippet

snippet retrieve
RetrieveRequest retrieve${1:entityName} = new RetrieveRequest();
$1.ColumnSet = new ColumnSet("name");
$1.Target = new EntityReference(${2:retrieveEntity}, ${3:altKey});
try
\{
	RetrieveResponse response$1 = (RetrieveResponse)service.Execute(retrieve$1);
	if (response$1.Entity != null)
	\{
	}
}
catch (Exception ex)
\{
	${4:catchExpression}
}
endsnippet

snippet exlog
#region ${1:ERR-00} Error Log
string elName = "$1: ${2:errorName}";
string elNo = ex.HResult.ToString();
string elPackage = Variables.PackageName;
string elRecord = ${3:recordId};
string elMessage = ex.Message;
string elInnerException = ex.InnerException?.ToString();
string elAdditionalInformation = "";
ErrLog el = new ErrLog(elName, elNo, Variables.PackageName, Variables.TaskName, elRecord, elMessage, elInnerException, elAdditionalInformation);
el.CreateCRMErrLog(service);
#endregion
endsnippet

snippet	erlog
#region ${1:ERR-00} Error Log
string elName = "$1: ${2:errorName}";
string elNo = "$1";
string elPackage = Variables.PackageName;
string elTask = Variables.TaskName;
string elRecord = ${3:recordId};
string elMessage = "${4:message}";
string elInnerException = "";
string elAdditionalInformation = "";
ErrLog el = new ErrLog(elName, elNo, elPackage, elTask, elRecord, elMessage, elInnerException, elAdditionalInformation);
el.CreateCRMErrLog(service);
#endregion
endsnippet

snippet /sum "XML summary comment"
/// <summary>
/// ${0:${VISUAL}}
/// </summary>
endsnippet

snippet <p "XML pramameter comment" w
<param name="${1}">${2}</param>
endsnippet

snippet <ex "XML exception comment" w
<exception cref="${1:System.Exception}">${2}</exception>
endsnippet

snippet <r "XML returns comment" w
<returns>${0:${VISUAL}}</returns>
endsnippet

snippet <c "XML code comment" w
<code>${0:${VISUAL}}</code>
endsnippet

# vim:ft=snippets:
