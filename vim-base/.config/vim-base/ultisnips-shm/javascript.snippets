#extends filetype1, filetype2

global !p
from shm_snippet_helpers import *
endglobal

snippet clog
console.log(${0:${VISUAL}});
endsnippet

snippet ctable
console.table(${0:${VISUAL}});
endsnippet

snippet if
if (${1:condition}) \{
	${2:statement}
}
endsnippet

snippet else
else \{
	${1:else statement}
}
endsnippet

snippet elif
else if (${1:condition}) \{
	${2:statement}
}
endsnippet

snippet for
for (var ${1:i} = ${2:0}; $1 ${3:<} ${4:10}; $1${5:++}) \{
	$0
}
endsnippet

snippet forin
//var object1 = \{a: 1, b: 2, c: 3};

for (var ${1:property} in ${2:object}) \{
	$0
}
endsnippet

snippet while
while (var ${1:i} ${2:<} ${3:9}) \{
	$1${4:++};
}
endsnippet

snippet dowhile
var ${1:i} = ${2:initializationValue};
do \{
	$1 ${3:+=} ${4:incrementValue};
	${5:output}
} while ($1 ${6:<} ${7:comparisonValue})

endsnippet

snippet class
class ${1:ClassName} \{
	constructor(${2:Constructor1}, ${3:Constructor2}) \{
		this.name = '$1';
		this.$2 = $2;
		this.$3 = $3;
	}
}
endsnippet

snippet func
function ${1:functionName} (${2:variables passed}) \{
	${3:var let} ${4:returnVar} = ${5:returnVarValue}
	$0
	return $4;
}
endsnippet


snippet funcv
${1:var let} ${2:name} = function ${3:functionName} (${4:variables passed}) \{
	${5:var let} ${6:returnVar} = ${7:returnVarValue}
	$0
	return $6;
}
endsnippet

snippet func>
${1:var let} ${2:name} = (${3:variables passed}) => ${4:functionExpression a + b}
endsnippet

snippet var
var ${1:name} = ${2:value};
endsnippet

snippet let
let ${1:name} = ${2:value};
endsnippet

snippet const
const ${1:NAME} = ${2:value};
endsnippet

snippet bcom
/* ${0:${VISUAL}} */
endsnippet

snippet switch

switch (${1:variableName}) \{
	case ${2:case1}:
		${3:case1Actions}
		break;
	case ${4:case2}:
		${5:case2Actions}
		break;
	default:
		break;
}

snippet keyval
${1:key}: "${2:value}"
endsnippet

snippet obj
${1:let} ${2:objName} = \{ ${3:key}: "${4:value}" };
endsnippet

snippet array
${1:let} ${2:arrayName} = [${3:element1}, ${4:element2}$0];
endsnippet

snippet AND
&& $0
endsnippet

snippet OR
|| $0
endsnippet

snippet NOT
!$0
endsnippet

snippet trycatch
try \{
	${1:tryFunction}
}
catch(err) \{
	${2:catchFunctionOrLog}
}
endsnippet

# vim:ft=snippets:
